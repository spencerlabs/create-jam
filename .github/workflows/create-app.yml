name: Create App
on:
  workflow_call:
    inputs:
      name:
        required: true
        description: "Name of the application (ex. 'react')"
        type: string
      command:
        required: true
        description: "Base create command (ex. 'react-app')"
        type: string
      type:
        required: true
        description: "Add template type for app subdirectory (ex. 'javascript', 'typescript', or 'remix-ts')"
        type: string
      flags:
        default: ''
        description: "Any flags to add to create commmand (ex. '--typescript')"
        type: string
      color:
        default: ''
        description: "Color to apply to GitHub label (ex. 'E99695')"
        type: string

jobs:
  create_app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          path: repo
          
      - name: Create app folder
        run: |
          sudo mkdir app
          
      - name: Run create command
        run: |
          cd app
          sudo yarn create ${{ inputs.command }} jam-app ${{ inputs.flags }}
      
        # delete extra files and add empty lock file to prevent workspace install
      - name: Clean up app
        run: |
          cd app/jam-app
          sudo rm -f yarn.lock
          sudo rm -f package-lock.json
          sudo rm -rf .git
          sudo rm -rf node_modules
          sudo touch yarn.lock
          
      - name: Move folders
        run: |
          sudo rm -rf repo/templates/${{ inputs.name }}/${{ inputs.type }}
          sudo mkdir -p repo/templates/${{ inputs.name }}
          sudo mv app/jam-app repo/templates/${{ inputs.name }}/${{ inputs.type }}
          sudo rm -rf app

        # create or switch to template branch
      - name: Switch to template branch
        working-directory: ./repo
        run: |
          git config user.name "${{ inputs.name }}-app bot"
          git config user.email "<>"
          git config pull.rebase false
          git switch -c template/${{ inputs.name }}

      - name: Check for remote branch
        id: remote_check
        # failure handled in next step, so we let it pass
        continue-on-error: true
        working-directory: ./repo
        run: |
          git ls-remote --exit-code --heads origin template/${{ inputs.name }}

        # pull or create remote branch
      - if: steps.remote_check.outcome == 'failure'
        name: Create remote
        working-directory: ./repo
        run: |
          git push origin template/${{ inputs.name }}
      
      - if: steps.remote_check.outcome == 'success'
        name: Pull remote
        working-directory: ./repo
        run: |
          git pull origin template/${{ inputs.name }}

      - name: Commit changes
        # an error here most likely means no changes, so we let it pass
        continue-on-error: true
        working-directory: ./repo
        run: |
          git add ./templates/${{ inputs.name }}/*
          git commit -m 'Update templates/${{ inputs.name }}/${{ inputs.type }}'
          git push origin template/${{ inputs.name }}

      - name: Create PR
        working-directory: ./repo
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh label create 'template/${{ inputs.name }}' -f -d 'Updates to ${{ inputs.name }} templates' -c ${{ inputs.color }}
          gh pr create -B ${{ github.event.repository.default_branch }} -H template/${{ inputs.name }} -l template/${{ inputs.name }} -t 'Updating ${{ inputs.name }} template(s)' -b ':robot: *An automated PR*
  
          Generated template(s) with `yarn create ${{ inputs.command }}` in `./templates/${{ inputs.name }}`'
