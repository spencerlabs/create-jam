name: Create App
on:
  workflow_call:
    inputs:
      name:
        required: true
        description: "Name of the application (ex. 'react')"
        type: string
      package:
        default: ''
        description: "Package to install for CLI (ex. 'gatsby-cli')"
        type: string
      command:
        required: true
        description: "Base create command (ex. 'react-app' or 'gatsby init')"
        type: string
      type:
        description: "Add template type for app subdirectory (ex. 'javascript', 'typescript', or 'remix-ts')"
        type: string
      flags:
        default: ''
        description: "Any flags to add to create commmand (ex. '--typescript')"
        type: string
      color:
        default: ''
        description: "Color to apply to GitHub label (ex. 'E99695')"
        type: string
      create_dir:
        default: true
        description: "Should the 'jam-app' dir be created first in the CLI implementation"
        type: boolean

jobs:
  create_app:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          path: repo

      - name: Setup node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create app folder
        run: |
          sudo mkdir app

      - if: inputs.package == ''
        name: Run create command
        working-directory: ./app
        run: |
          sudo npx create-${{ inputs.command }} jam-app ${{ inputs.flags }}

      - if: inputs.package
        name: Create with CLI
        working-directory: ./app
        run: |
          sudo npm install -g ${{ inputs.package }}
          [ "${{ inputs.create_dir }}" = true ] && sudo mkdir jam-app
          sudo ${{ inputs.command }} jam-app ${{ inputs.flags }}

        # delete extra files and add empty lock file to prevent workspace install
      - name: Clean up app
        working-directory: ./app/jam-app
        run: |
          sudo rm -f yarn.lock package-lock.json
          sudo rm -rf .git node_modules
          sudo touch yarn.lock
          [ -f ".gitignore" ] && sudo mv .gitignore gitignore.template

        # create or switch to template branch
      - name: Switch to template branch
        working-directory: ./repo
        run: |
          git config user.name "${{ inputs.name }}-app bot"
          git config user.email "<>"
          git config pull.rebase false
          git switch -c template/${{ inputs.name }}

      - name: Check for remote branch
        id: remote_check
        # failure handled in next step, so we let it pass
        continue-on-error: true
        working-directory: ./repo
        run: |
          git ls-remote --exit-code --heads origin template/${{ inputs.name }}

        # pull or create remote branch
      - name: Create or pull remote
        working-directory: ./repo
        run: |
          if [ "${{ steps.remote_check.outcome }}" == "failure" ]; then
            git push origin template/${{ inputs.name }}
          else
            git pull origin template/${{ inputs.name }}
          fi

      - name: Move folders
        run: |
          if [ "${{ inputs.type }}" = true ]; then
            sudo rm -rf repo/templates/${{ inputs.name }}/${{ inputs.type }}
            sudo mkdir -p repo/templates/${{ inputs.name }}
            sudo mv app/jam-app repo/templates/${{ inputs.name }}/${{ inputs.type }}
          else
            sudo rm -rf repo/templates/${{ inputs.name }}
            sudo mv app/jam-app repo/templates/${{ inputs.name }}
          fi
          sudo rm -rf app

      - name: Commit changes
        # an error here most likely means no changes, so we let it pass
        continue-on-error: true
        working-directory: ./repo
        run: |
          if [ "${{ inputs.type }}" = true ]; then
            git add ./templates/${{ inputs.name }}/${{ inputs.type }}
            git commit -m 'Update templates/${{ inputs.name }}/${{ inputs.type }}'
          else
            git add ./templates/${{ inputs.name }}
            git commit -m 'Update templates/${{ inputs.name }}'
          fi
          git push origin template/${{ inputs.name }}

      - name: PR message
        id: pr_message
        run: |
          if [ "${{ inputs.package }}" == "" ]; then
            echo "message=yarn create ${{ inputs.command }}" >> $GITHUB_OUTPUT
          else
            echo "message=${{ inputs.command }}" >> $GITHUB_OUTPUT
          fi

      - name: Create PR
        # an error here most likely means PR already exists, so we let it pass
        continue-on-error: true
        working-directory: ./repo
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh label create 'template/${{ inputs.name }}' -f -d 'Update ${{ inputs.name }} templates' -c ${{ inputs.color }}
          gh pr create -B ${{ github.event.repository.default_branch }} -H template/${{ inputs.name }} -l template/${{ inputs.name }} -t 'Updating ${{ inputs.name }} template(s)' -b ':robot: *An automated PR*

          Generated template(s) with `${{ steps.pr_message.outputs.message }}` in `./templates/${{ inputs.name }}`'
